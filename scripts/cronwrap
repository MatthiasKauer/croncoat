#!/usr/bin/env python

"""
    cronwrap
    ~~~~~~~~~~~~~~

    A cron job wrapper that wraps jobs and enables better error reporting and command timeouts.

    Example of usage::

        #Will print out help
        $ cronwrap -h

        #Will send out a timeout alert to cron@my_domain.com:
        $ cronwrap -c "sleep 2" -t "1s" -e cron@my_domain.com

        #Will send out an error alert to cron@my_domain.com:
        $ cronwrap -c "blah" -t "1s" -e cron@my_domain.com

        #Will not send any reports:
        $ cronwrap -c "ls" -e cron@my_domain.com

        #Will send a successful report to cron@my_domain.com:
        $ cronwrap -c "ls" -e cron@my_domain.com -v

    :copyright: 2010 by Plurk
    :license: BSD
"""
__VERSION__ = '1.3'

import sys
import re
import os
import argparse
import tempfile
import time
import platform
from datetime import datetime, timedelta
import subprocess
import signal

#--- Handlers ----------------------------------------------

def send_email(sys_args, emails, subject, message):
    """Sends an email via `mail`."""
    emails = emails.split(',')

    err_report = tempfile.mktemp()

    pymail = True
    if(pymail):
        
        for toaddr in emails:
            emailMsg = email.MIMEMultipart.MIMEMultipart('mixed')
            emailMsg['To'] = toaddr
            emailMsg['From'] = sys_args.fromaddr
            emailMsg['Subject'] = subject.replace('"', "'")
            emailMsg.attach(email.mime.Text.MIMEText(message, _charset='utf-8'))
            smtp.sendmail(emailMsg['From'], emailMsg['To'], emailMsg.as_string())
                
    else:
        fp_err_report = open(err_report, "w")
        fp_err_report.write(message)
        fp_err_report.close()

        try:
            for email in emails:
                if sys_args.fromaddr:
                    cmd = Command('mail -s "%s" -a "From: %s" %s < %s' %
                              (subject.replace('"', "'"),
                                sys_args.fromaddr,
                               email,
                               err_report)
                              )
                else:
                    cmd = Command('mail -s "%s" %s < %s' %
                              (subject.replace('"', "'"),
                               email,
                               err_report)
                              )

                if sys_args.verbose:
                    if cmd.returncode == 0:
                        print 'Sent an email to %s' % email
                    else:
                        print 'Could not send an email to %s' % email
                        print trim_if_needed(cmd.stderr)
        finally:
            os.remove(err_report)


def is_time_exceeded(sys_args, cmd):
    """Returns `True` if the command's run time has exceeded the maximum
    run time specified in command arguments. Else `False  is returned."""
    cmd_time = int(cmd.run_time)

    t_val = parse_time_to_secs(sys_args.time)
    return cmd_time > t_val

def parse_time_to_secs(arg_time):
    #Parse sys_args.time
    max_time = arg_time
    sp = re.match("(\d+)([hms])", max_time).groups()
    t_val, t_unit = int(sp[0]), sp[1]

    #Convert time to seconds
    if t_unit == 'h':
        t_val = t_val * 60 * 60
    elif t_unit == 'm':
        t_val = t_val * 60

    return t_val



def trim_if_needed(txt, max_length=10000):
    if len(txt) > max_length:
        return '... START TRUNCATED...\n%s' % txt[-max_length:]
    else:
        return txt


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="A cron job wrapper that wraps jobs and enables better error reporting and command timeouts. Version %s" % __VERSION__)

    parser.add_argument('-c', '--cmd', help='Run a command. Could be `cronwrap -c "ls -la"`.')
    parser.add_argument('-f', '--fromaddr', help='Specify sender address for your emails. Must match your local smtp setup.')

    parser.add_argument('-e', '--emails',
                        help='Email following users if the command crashes or exceeds timeout. '
                        'Could be `cronwrap -e "johndoe@mail.com, marcy@mail.com"`. '
                        "Uses system's `mail` to send emails. If no command (cmd) is set a test email is sent.")

    parser.add_argument('-t', '--time',
                        help='Set the maximum running time.'
                        'If this time is passed an alert email will be sent.'
                        "The command will keep running even if maximum running time is exceeded."
                        "The default is 1 hour `-t 1h`. "
                        "Possible values include: `-t 2h`,`-t 2m`, `-t 30s`."
                        )

    parser.add_argument('-v', '--verbose',
                        nargs='?', default=False,
                        help='Will send an email / print to stdout on successful run.')

    parser.add_argument('-k', '--kill', nargs='?', default=False, help='Terminate process after timeout (as set by -t) is exceeded.')

    handle_args(parser.parse_args())
